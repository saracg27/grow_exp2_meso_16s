---
title: "SCG_09_Water_16S_RelAbund_plots"
author: "Sara Correa Garcia"
format: html
---

------------------------------------------------------------------------

# LOAD PACKAGES & DATA

# ------------------------------------------------------------------------

## Packages

```{r}
library(here)
source(here("source", "libraries.R"))
```

## Metadata

```{r}
meta <- read.csv(file = here("data","raw", "16S_water", "metadata.tsv"), dec = ".", header = T, row.names = 1, sep = "\t", comment.char = "") # 144 obs 6 vars load
str(meta)
## Convert character vectors to factors
meta[sapply(meta, is.character)] <- lapply(meta[sapply(meta, is.character)], as.factor) # did it work? Check with str(meta)
#rownames(meta) <- sub(".*i5_", "", rownames(meta))
rownames(meta) <- stringr::str_replace_all(rownames(meta), '[-]', '.')
```


## 16S ASV table

### Raw filtered counts
```{r}
raw <- read.csv(file = here("data", "raw", "16S_water", "Mesocosm_Water_16S_oct2023.ASV_table_norarefaction_dnNA.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "") #20078 objs in 299 vars
```

Check library size
```{r}
raw_libsize <- as.data.frame(colSums(raw[,1:ncol(raw)-1]))
names(raw_libsize) <- c("lib_size")
summary(raw_libsize)
```

 Min.   :    6                  
 1st Qu.:42124                  
 Median :48850                  
 Mean   :46845                  
 3rd Qu.:53589                  
 Max.   :75408  
There seems to be certain libraries that have a small size (min = 6). Get the ones where the library size is smaller than 10000

```{r}
small_libs <-  raw_libsize %>% filter_at(vars(1), any_vars(. < 10000))
small_libs
```

                    lib_size
M10E.Jan.31.2022         177
M12E.10.12.21            189
M1E.30.11.21            4780
M2G.30.11.21               6
M7E.432.Feb.16.2022      421
M9E.434.Feb.16.2022      361

There are a maximum of 6 problematically low libraries. Check what are these in the metadata
```{r}
small_libs_to_erase <- rownames(small_libs)
meta_small_libs <- meta[rownames(meta) %in% small_libs_to_erase, ]
```


```{r}
#Set a few color variables to make our table more visually appealing
library(formattable)
noplant_red <- "#F8766D"
scirpus_green <- "#00BA38"
triglo_blue <- "#619CFF"
meta_small_libs <- meta_small_libs[,c("alias", "Temperature", "Sample_type", "Time")]
meta_small_libs <- as.tibble(meta_small_libs)
formattable(meta_small_libs)

formattable(meta_small_libs, 
            align =c("l","l","c","c"))

```

Upon inspection, there is not a clear pattern in sample type that has small libraries (random effect).
We can proceed to eliminate these samples

## Subset meta and raw
```{r}
meta <- meta[!rownames(meta) %in% small_libs_to_erase, ] # left with 138 samples
# Transfer taxonomy to another dataframe to cbind later with good samples
taxonomy <- as.data.frame(raw$taxonomy)
rownames(taxonomy) <- rownames(raw)
raw <- raw[ , colnames(raw) %in% rownames(meta)]
raw <- cbind(raw, taxonomy)
```

## Order metadata
```{r}
meta <- meta[order(row.names(meta)),] # order metadata 
```

## Keep interestig variables
```{r}
cols_to_keep <- c("Sample_type", "Time", "Temperature")
meta <- meta[, cols_to_keep]
```



# TAXONOMY (RAW COUNTS)

# ------------------------------------------------------------------------

## Create tax_raw table for raw data

```{r}
tax_raw <- as.data.frame(raw[,ncol(raw)]) # taxonomy obtained from last column as independent table
otuids <- rownames((raw))
rownames(tax_raw) <- otuids
names(tax_raw) <- c("taxonomy")
```

## Separate tax_raw into groups
```{r}
tax_raw_clean <- separate(tax_raw, taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax_raw_clean <- tax_raw_clean[,-which(names(tax_raw_clean) %in% c("Species", "Strain"))]
tax_raw_clean <- as.data.frame(tax_raw_clean)
levels(as.factor(tax_raw_clean$Domain)) #  Bacteria, all ok
levels(as.factor(tax_raw_clean$Phylum)) #  22 Phyla 
levels(as.factor(tax_raw_clean$Class)) # 57 classes
levels(as.factor(tax_raw_clean$Order)) # 139 orders
levels(as.factor(tax_raw_clean$Family)) # 202 Families
levels(as.factor(tax_raw_clean$Genus)) # 342 genus
str(tax_raw_clean)
```

## Clean taxonomy names
```{r}
# eliminate the characters  -----
pattern <- "[a-z]__"
replacement <- ""
tax_clean <- as.data.frame(apply(tax_raw_clean, 2, function(col) gsub(pattern, replacement, col)))
rm(pattern)
rm(replacement)
```

## Fill NAs with last available taxon rank
```{r}
tax_clean <- tax_clean |> 
   t() |> 
   as.data.frame() |> 
   fill(everything(), .direction = "down") |> 
   t() |> 
   as.data.frame()
```



# ABUNDANCE TABLES (RAW) - PHYLUM

# ------------------------------------------------------------------------

## Create clean count table no tax
```{r}
counts_clean_tax <- merge(raw, tax_clean, by = "row.names")
rownames(counts_clean_tax) <- counts_clean_tax$Row.names
counts_clean_tax$Row.names <- NULL
counts_clean_tax$`raw$taxonomy` <- NULL
counts <- counts_clean_tax[ , sapply(counts_clean_tax, is.numeric)]
```

## Phylum
### Aggregate by phylum
```{r}
phylum <- cbind(counts_clean_tax$Phylum, counts)
names(phylum)[names(phylum) == "counts_clean_tax$Phylum"] <- "phylum"
phylum <- aggregate(. ~ phylum, data = phylum, sum)
phylum <- phylum[-grep("Proteobacteria", phylum$phylum),] # eliminate proteobacteria to then attach proteobacteria classes
str(phylum)
rownames(phylum) <- phylum$phylum # set row names with first column containing phylum names
phylum$phylum <- NULL # remove column with tax rank
phylum <- as.matrix(t(phylum)) # transpose
```

### Aggregate by class 
to find all proteobacteria classes
```{r}
class <- cbind(counts_clean_tax$Class, counts)
names(class)[names(class) == "counts_clean_tax$Class"] <- "class"
class <- aggregate(. ~ class, data = class, sum)
str(class)
rownames(class) <- class$class # set row names with first column containing class names
class$class <- NULL # remove column with tax rank
class <- as.matrix(t(class))  # it yields 58 classes in 138 

phylum <- cbind(phylum, class[,grep("proteobacteria", colnames(class))]) # it yields 26 phyla in 138 samples

```

## Genus
```{r}
#substitute unculture by ""
pattern <- "uncultured"
replacement <- ""
counts_clean_tax <- as.data.frame(apply(counts_clean_tax, 2, function(col) gsub(pattern, replacement, col)))
rm(pattern)
rm(replacement)

# Eliminate empty spaces
pattern <- " "
replacement <- ""
counts_clean_tax <- as.data.frame(apply(counts_clean_tax, 2, function(col) gsub(pattern, replacement, col)))
rm(pattern)
rm(replacement)

# Switch empty strings by NA
counts_clean_tax[counts_clean_tax == ''] <- NA

# substitute NA with last available taxonomy
counts_clean_tax <- counts_clean_tax |> 
   t() |> 
   as.data.frame() |> 
   fill(everything(), .direction = "down") |> 
   t() |> 
   as.data.frame()

```

### Aggregate table
```{r}
genus <- cbind(counts_clean_tax$Genus, counts)
names(genus)[names(genus) == "counts_clean_tax$Genus"] <- "genus"
genus <- aggregate(. ~ genus, data = genus, sum)
rownames(genus) <- genus$genus # set row names with first column containing genus names
genus$genus <- NULL # remove column with tax rank
genus <- as.matrix(t(genus)) # transpose yields 430 genera
```


## Calculate relative abundances
```{r}
genus_rel <- (genus/rowSums(genus))
#Check
if (all(round(rowSums(genus_rel),6) == 1)) { #Sanity check all 1 - round() reduces the risk of floating-point errors
  print("Sanity check ok = all sum to 1")
} else {
  print("ERROR: not all columns sum to 1")
}
#Check
phylum_rel <- (phylum/rowSums(phylum))
if (all(round(rowSums(phylum_rel),6) == 1)) { #Sanity check all 1 - round() reduces the risk of floating-point errors
  print("Sanity check ok = all sum to 1")
} else {
  print("ERROR: not all columns sum to 1")
}
```

## Order by row names
```{r}
meta_sorted <- meta[order(row.names(meta)),] 
phylum_sorted <- phylum_rel[order(row.names(phylum_rel)),] 
genus_sorted <- genus_rel[order(row.names(genus_rel)),] # order 

# Sanity check for phylum
if (all(row.names(meta_sorted) == rownames(phylum_sorted) )) {
  print("Sanity check ok")
} else {
  print("ERROR: not all row names are the same")
}

# Sanity check for genus
if (all(row.names(meta_sorted) == rownames(genus_sorted) )) {
  print("Sanity check ok")
} else {
  print("ERROR: not all row names are the same")
}

```





# PCoA ALL SAMPLES
# ------------------------------------------------------------------------
## Calculate Bray Curtis
```{r}
counts <- raw[, 1:ncol(raw)-1] #2462 in 138
counts.t <- t(counts)
counts.rel <- counts.t/rowSums(counts.t)
rowSums(counts.rel) # Sanity check: all samples sum to 1
bray <- vegdist(counts.rel, method = "bray")
```

## Calculate PCOA
```{r}
pcoa.com <- cmdscale(sqrt(bray), eig = T)
explainedvar1 <- (pcoa.com$eig[1]/sum(pcoa.com$eig)*100)#Axis1 the first axis explains 14.11% of the variance
explainedvar1
explainedvar2 <- (pcoa.com$eig[2]/sum(pcoa.com$eig)*100)#Axis2 the second axis explains 12.35% of the variance
explainedvar2
sumeigen <- (explainedvar1 + explainedvar2)#+explainedvar3+explainedvar4+explainedvar5+explainedvar6) # toghether, axis 1 and 2 explain 26.47% of the variance.
sumeigen
com.pcoa.points <- data.frame(pcoa.com$points) # create a column with the coordinates for each sample
colnames(com.pcoa.points) <- c("Axis1", "Axis2") # rename coordinate columns
com.pcoa.points <- com.pcoa.points[order(rownames(com.pcoa.points)),]
meta <- meta[order(rownames(meta)),]
rownames(meta) == rownames(com.pcoa.points)
### ------------ PCoA ------------- ###
com.pcoa.points.bind <- cbind(com.pcoa.points,meta) #Everything need to be in the same object, ordered comunity and ordered metadata
(str(com.pcoa.points.bind))
```

## Ordination
```{r}
ordination5 <- ggplot(data = com.pcoa.points.bind, aes(x = Axis1, y = Axis2)) +
        geom_point(aes(shape = Time, color = Sample_type, size = Temperature)) + 
        labs(fill = " ", shape = " ") +
        xlab("PCoA axis1 = 14 %") + 
        ylab("PCoA axis2 = 12 %") + 
        ggtitle("PCoA of bacterial Community on water - Bray Curtis") +
        theme_classic() +
        theme(axis.title.x = element_text(size = 24, face = "bold"),
                     axis.text.x = element_blank(),
                     axis.ticks.x = element_blank(),
                     axis.title.y = element_text(size = 24, face = "bold"),
                     axis.text.y = element_text(size = 20),
                     legend.position = "right",
                     axis.line = element_line(size = 1),
                     plot.title = element_text(hjust = 0)) 
ordination5
#ggsave(here("output", "figures", "PCoA_bc_16S_water_all-samples.pdf"), ordination5, height = 8.5, width = 11, units = "in")

```

# DATA WRANGLING - GENUS

# -------------------------------------------------------

## Remove low abundances

```{r}
dim(genus) # 138 430
colsums_genus <- as.data.frame(colSums(genus_rel))
sum(colsums_genus$`colSums(genus_sed)` == 0) # 0 genera have a relative abundance of 0 in water samples day 15
#genus <- genus_sed[, colSums(genus_sed) != 0] # drop genera that are not present in sediment samples
abund <- as.data.frame(genus_rel[, colMeans(genus_rel) > 0.005]) # 38 genera with a relative abundance over 0.5%
abund$Others = 1 - rowSums(abund)#Add an "Other" category
colnames(abund) # are there empty spaces in column names?
```

## Bind treatments and abundances
```{r}
treat <- meta
abund <- abund[order(rownames(abund)),]
treat <- treat[order(rownames(treat)),]
rownames(abund) == rownames(treat)
abund_treat = cbind(treat,abund)
dim(abund_treat) # 138 42 Ok
```

## Gather in long format for ggplot

```{r}
long <- gather(abund_treat,Taxa,RelAbund,4:ncol(abund_treat)) #change the column index value to match the first column that contains a Taxa name and not a treatment
head(long) # It looks ok!
genus_long <- long
```


# STACKED BARS GENUS

# -------------------------------------------------------

## Relevel groups to put the largest group at the bottom, and the second largest at the top

```{r}
genus_long$Taxa <- fct_relevel(genus_long$Taxa, "Comamonadaceae", after = 0L)
genus_long$Taxa <- fct_relevel(genus_long$Taxa, "Isosphaeraceae", after = Inf)
genus_long$Taxa <- fct_relevel(genus_long$Taxa, "Others", after = 30L)
```

## Color palette

```{r}
 pal40 <- c("#FFE4C4", "#C1CDCD", "#8B8378", "#8EE5EE", "#E9967A", "#FFF8DC", "#CD9B1D", "#FFF68F", "#FFC125", "#A2CD5A", "#EE7600", "#008B8B", "#7AC5CD", "#EE3B3B", "#FFAEB9", "#DA70D6", "#6E6E6E", "#1874CD", "#698B22", "#CDAF95", "#C0FF3E", "#DDA0DD", "#7A67EE", "#EE9A49", "#4EEE94", "#FF3E96", "#40E0D0", "#36648B", "#8B2252", "#CD9B9B", "#BFEFFF", "#FFFF00", "#0000EE", "#00CD00", "#F7F7F7", "#FFE4E1", "#7D26CD", "#050505", "#00FF00", "#CD3278")
```

## Recode factors

```{r}
genus_long$Temperature <- factor(genus_long$Temperature,
                                  levels =  c("10C day - 5C night", 
                                              "20C day - 10C night"),
                                  labels = c("cold",
                                             "warm"))
genus_long$Time <- factor(genus_long$Time, 
                             levels = c("D-0", "D8", "D15", "D34", "D61", "D77"), 
                             labels = c("0", "8", "15", "34", "61", "77"))
```


## Single plot
### organize by temp and plant
```{r}
stack_genus <- ggplot(genus_long, aes(fill = Taxa, y = RelAbund, x = Time)) + 
  geom_bar(stat = "identity", position = "fill") +
  labs( y = "Relative abundance",
        title = "Relative abundance of most abundant genera - 16S water all timepoints") + 
  theme_minimal() +
  theme(strip.text.x = element_text(face = "bold.italic", size = 16),
        axis.text.x = element_text(size = 12, face = "bold"),
        axis.text.y = element_text(size = 12, face = "bold"),
        plot.title = element_text(face = "bold", size = 16),
        legend.title = element_text(size = 14, color = "black", face = "bold"),
        legend.text = element_text(size = 12, face ="bold.italic", color ="black"),
        legend.position = "right",
        axis.title = element_text(size = 14, face = "bold"),
        rect = element_rect(fill = "white")) +
  scale_fill_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  scale_color_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  facet_wrap(  Temperature ~ Sample_type, scales = "free") + 
  scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
  scale_x_discrete(name = "Timepoints") +
      guides(fill = guide_legend(ncol = 1))

stack_genus

#ggsave(file = here::here("output", "figures", "relAbund_genus_16S_water_all-samplepoints.pdf"), stack_genus, width = 10, height = 11, units = "in", dpi = 300,bg = "white")

```
### organize by time

#### Create treatment variable
```{r}
genus_long$Sample_type <- factor(genus_long$Sample_type,
                                  levels =  c("No_plant", 
                                              "Scirpus",
                                              "Triglochin")) 
    
    
genus_long$treatment <- paste0(genus_long$Temperature, "_", genus_long$Sample_type)
genus_long$treatment <- as.factor(genus_long$treatment)

genus_long$treatment <- factor(genus_long$treatment,
                               levels = c("cold_No_plant","cold_Scirpus","cold_Triglochin",
                                          "warm_No_plant","warm_Scirpus",  "warm_Triglochin"), 
           labels = c("cld_np", "cld_Sc", "cld_Tr", "wrm_np", "wrm_Sc", "wrm_Tr")
)
```


```{r}

stack_genus_time <- ggplot(genus_long, aes(fill = Taxa, y = RelAbund, x = treatment)) + 
  geom_bar(stat = "identity", position = "fill") +
  labs( y = "Relative abundance",
        title = "Relative abundance of most abundant genera - 16S water all timepoints") + 
  theme_minimal() +
  theme(strip.text.x = element_text(face = "bold.italic", size = 16),
        axis.text.x = element_text(size = 12, face = "bold", angle = 45, vjust =1, hjust = 1),
        axis.text.y = element_text(size = 12, face = "bold"),
        plot.title = element_text(face = "bold", size = 16),
        legend.title = element_text(size = 14, color = "black", face = "bold"),
        legend.text = element_text(size = 12, face ="bold.italic", color ="black"),
        legend.position = "right",
        axis.title = element_text(size = 14, face = "bold"),
        rect = element_rect(fill = "white")) +
  scale_fill_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  scale_color_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  facet_wrap(~ Time, scales = "free") + 
  scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
  scale_x_discrete(name = "treatment") +
      guides(fill = guide_legend(ncol = 1))

stack_genus_time

#ggsave(file = here::here("output", "figures", "relAbund_genus_16S_water_all-samplepoints_time.pdf"), stack_genus_time, width = 10, height = 11, units = "in", dpi = 300,bg = "white")

```

Polynucleobacter appears in other lakes and water ecosystems influenced by OSPW
https://www.sciencedirect.com/science/article/pii/S0269749117327161,

and seem to be enriched on water communities at 15C (15 Celsius degrees) in mesoscale tank tests of diluted bitumen spills. https://www.sciencedirect.com/science/article/pii/S0048969722072618

Differential constrains favour evolution and adaptability of Polynucleobacter https://journals.asm.org/doi/full/10.1128/msystems.00003-16



# DATA WRANGLING - PHYLUM

# -------------------------------------------------------

## Remove low abundances

```{r}
dim(phylum) # 138 26
colsums_phylum <- as.data.frame(colSums(phylum_rel))
sum(colsums_phylum$`colSums(phylum_rel)` == 0) # 0 genera have a relative abundance of 0 in water samples day 15
abund_p <- as.data.frame(phylum_rel[, colMeans(phylum_rel) > 0.01]) # 7 phyla with a relative abundance over 0.5%
abund_p$Others = 1 - rowSums(abund_p)#Add an "Other" category
colnames(abund_p) # there are empty spaces in column names
colnames(abund_p) <- sub(" ", "", colnames(abund_p))
# Update with most recent names
colnames(abund_p)[colnames(abund_p) == "Actinobacteriota"] <- "Actinomycetota"
colnames(abund_p)[colnames(abund_p) == "Firmicutes"] <- "Bacillota"
colnames(abund_p)[colnames(abund_p) == "Chloroflexi"] <- "Chloroflexota"
```

## Bind treatments and abundances
```{r}
treat <- meta
abund_p <- abund_p[order(rownames(abund_p)),]
#treat <- treat[order(rownames(treat)),]
rownames(abund_p) == rownames(treat)
abundp_treat = cbind(treat,abund_p)
dim(abundp_treat) # 138 10
```

## Gather in long format for ggplot

```{r}
long_p <- gather(abundp_treat,Taxa,RelAbund,4:ncol(abundp_treat)) #change the column index value to match the first column that contains a Taxa name and not a treatment
head(long_p) # It looks ok!
phylum_long <- long_p
```




# STACKED BARS PHYLUM

# -------------------------------------------------------

## Relevel groups to put the largest group at the bottom, and the second largest at the top

```{r}
phylum_long$Taxa <- fct_relevel(phylum_long$Taxa, "Alphaproteobacteria", after = 0L)
phylum_long$Taxa <- fct_relevel(phylum_long$Taxa, "Gammaproteobacteria", after = Inf)
phylum_long$Taxa <- fct_relevel(phylum_long$Taxa, "Others", after = 5L)
phylum_long$Taxa <- fct_relevel(phylum_long$Taxa, "Bacteroidota", after = 1L)
```

## Color palette

```{r}
 pal40 <- c("#FFE4C4", "#C1CDCD", "#8B8378", "#8EE5EE", "#E9967A", "#FFF8DC", "#CD9B1D", "#FFF68F", "#FFC125", "#A2CD5A", "#EE7600", "#008B8B", "#7AC5CD", "#EE3B3B", "#FFAEB9", "#DA70D6", "#6E6E6E", "#1874CD", "#698B22", "#CDAF95", "#C0FF3E", "#DDA0DD", "#7A67EE", "#EE9A49", "#4EEE94", "#FF3E96", "#40E0D0", "#36648B", "#8B2252", "#CD9B9B", "#BFEFFF", "#FFFF00", "#0000EE", "#00CD00", "#F7F7F7", "#FFE4E1", "#7D26CD", "#050505", "#00FF00", "#CD3278")
```

## Recode factors

```{r}
phylum_long$Temperature <- factor(phylum_long$Temperature,
                                  levels =  c("10C day - 5C night", 
                                              "20C day - 10C night"),
                                  labels = c("cold",
                                             "warm"))
phylum_long$Time <- factor(phylum_long$Time, 
                             levels = c("D-0", "D8", "D15", "D34", "D61", "D77"), 
                             labels = c("0", "8", "15", "34", "61", "77"))
```


## Single plot
### organize by temp and plant
```{r}
stack_phylum <- ggplot(phylum_long, aes(fill = Taxa, y = RelAbund, x = Time)) + 
  geom_bar(stat = "identity", position = "fill") +
  labs( y = "Relative abundance",
        title = "Relative abundance of most abundant phyla - 16S water all timepoints") + 
  theme_minimal() +
  theme(strip.text.x = element_text(face = "bold.italic", size = 16),
        axis.text.x = element_text(size = 12, face = "bold"),
        axis.text.y = element_text(size = 12, face = "bold"),
        plot.title = element_text(face = "bold", size = 16),
        legend.title = element_text(size = 14, color = "black", face = "bold"),
        legend.text = element_text(size = 12, face ="bold.italic", color ="black"),
        legend.position = "right",
        axis.title = element_text(size = 14, face = "bold"),
        rect = element_rect(fill = "white")) +
  scale_fill_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  scale_color_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  facet_wrap(  Temperature ~ Sample_type, scales = "free") + 
  scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
  scale_x_discrete(name = "Timepoints") +
      guides(fill = guide_legend(ncol = 1))

stack_phylum

#ggsave(file = here::here("output", "figures", "relAbund_phyla_16S_water_all-samplepoints.pdf"), stack_phylum, width = 10, height = 11, units = "in", dpi = 300,bg = "white")

```
### organize by time

#### Create treatment variable
```{r}
phylum_long$Sample_type <- factor(phylum_long$Sample_type,
                                  levels =  c("No_plant", 
                                              "Scirpus",
                                              "Triglochin")) 
    
    
phylum_long$treatment <- paste0(phylum_long$Temperature, "_", phylum_long$Sample_type)
phylum_long$treatment <- as.factor(phylum_long$treatment)

phylum_long$treatment <- factor(phylum_long$treatment,
                               levels = c("cold_No_plant","cold_Scirpus","cold_Triglochin",
                                          "warm_No_plant","warm_Scirpus",  "warm_Triglochin"), 
           labels = c("cld_np", "cld_Sc", "cld_Tr", "wrm_np", "wrm_Sc", "wrm_Tr")
)
```


```{r}

stack_phylum_time <- ggplot(phylum_long, aes(fill = Taxa, y = RelAbund, x = treatment)) + 
  geom_bar(stat = "identity", position = "fill") +
  labs( y = "Relative abundance",
        title = "Relative abundance of most abundant phyla - 16S water all timepoints") + 
  theme_minimal() +
  theme(strip.text.x = element_text(face = "bold.italic", size = 16),
        axis.text.x = element_text(size = 12, face = "bold", angle = 45, vjust =1, hjust = 1),
        axis.text.y = element_text(size = 12, face = "bold"),
        plot.title = element_text(face = "bold", size = 16),
        legend.title = element_text(size = 14, color = "black", face = "bold"),
        legend.text = element_text(size = 12, face ="bold.italic", color ="black"),
        legend.position = "right",
        axis.title = element_text(size = 14, face = "bold"),
        rect = element_rect(fill = "white")) +
  scale_fill_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  scale_color_manual(values = pal40, guide = guide_legend(label.theme = element_text(face = "italic", size = 12))) +
  facet_wrap(~ Time, scales = "free") + 
  scale_y_continuous(limits = c(0,1), expand = c(0,0)) +
  scale_x_discrete(name = "treatment") +
      guides(fill = guide_legend(ncol = 1))

stack_phylum_time

#ggsave(file = here::here("output", "figures", "relAbund_phyla_16S_water_all-samplepoints_time.pdf"), stack_phylum_time, width = 10, height = 11, units = "in", dpi = 300,bg = "white")

```

# -------------------------------------------------------

# END OF SCRIPT

# -------------------------------------------------------
