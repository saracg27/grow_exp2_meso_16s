---
title: "Clean Data"
format: html
editor: source
---

********************************************************
# LOAD PACKAGES & DATA
# ********************************************************

## Packages
```{r}
library(here)
source(here("source", "libraries.R"))
```

## Metadata
```{r}
meta <- read.csv(file = here("data","clean", "mapping_file.tsv"), dec = ".", header = T, row.names = 1, sep = "\t", comment.char = "") #load
str(meta)
## Convert character vectors to factors
meta[sapply(meta, is.character)] <- lapply(meta[sapply(meta, is.character)], as.factor) # did it work? Check with str(meta)
rownames(meta) <- sub(".*i5_", "", rownames(meta))
rownames(meta) <- stringr::str_replace_all(rownames(meta), '[-]', '.')
```

## 16S ASV table

Because raw counts and rarefied data are not the same, the number of rows and the taxa retained are different. Therefore, it is necessary to keep two different clean_taxa objects, one for each asv table. 

### Raw filtered counts
```{r}
raw <- read.csv(file = here("data", "clean", "feature_table_filtered.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "") #2957 objs in 59 vars
```
Quickly fix sample names
```{r}
names(raw) <- sub(".*i5_", "", names(raw))

```
Check library size
```{r}
raw_libsize <- as.data.frame(colSums(raw[,1:ncol(raw)-1]))
summary(raw_libsize)
```
There is one library that is too small: 8.M3.13.07.21 with only 111 counts.
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
    111   22457   25262   24480   27334   33747 


### Rarefied counts
```{r}
rarefied <- read.csv(file = here("data", "clean", "feature_table_final_rarefied.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "") #2957 objs in 59 vars
```

Quickly fix sample names
```{r}
names(rarefied) <- sub(".*i5_", "", names(rarefied))
```

Check library size
```{r}
rar_libsize <- as.data.frame(colSums(rarefied[,1:ncol(rarefied)-1]))
summary(rar_libsize)
```
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   1000    1000    1000    1000    1000    1000 
  
As expected, rarefied data contain only 1000 total counts per sample as implemented in AmpliconTagger. Sample under that threshold are lost (in this case, sample 8.M3.13.07.21 was not retained with only 111 counts).

For this experiment, we will retain both datasets:

- The rarefied data will be used to calculate alpha and beta diversity (PCoA, permanova and related analysis, and ALDEx2).
- The raw count data will be used for calculating differential analyses: DESeq2, Maaslin2 and ANCOM-BC2 (as these analyses require raw count to perform their different normalization procedures)


## Relative abundances
### Phylum
```{r}
phylum <- read.table(file = here("data", "clean", "feature_table_final_rarefied_L2.tsv"), header = T, sep = "\t", row.names = 1)
names(phylum) <- sub(".*i5_", "", names(phylum)) # recoding of sample names ----
#str(phylum) #check structure
phylum <- data.frame(t(phylum))
```

### Class
```{r}
class <- read.table(file = here("data", "clean", "feature_table_final_rarefied_L3.tsv"), header = T, sep = "\t", row.names = 1)
names(class) <- sub(".*i5_", "", names(class)) # recoding of sample names ----
#str(class) #check structure
class <- data.frame(t(class))
```

### Genus
```{r}
genus  <- read.table(file = here("data", "clean", "feature_table_final_rarefied_L6.tsv"), header = T, sep = "\t", row.names = 1)
names(genus) <- sub(".*i5_", "", names(genus))
#str(genus) #check structure
genus <- data.frame(t(genus))
```

``` {#r}
save.image(file = here::here("source", "raw_data.RData"))
```

********************************************************
# CLEAN METADATA
# ********************************************************
## Order metadata
```{r}
meta_sorted <- meta[order(row.names(meta)),] # order metadata 
#rownames(meta_sorted) 
str(meta_sorted) # 196 7 variables
```

## Drop Blank process
```{r}
meta_sorted <- meta_sorted[!grepl("BlankpcrCES", meta_sorted$alias),]
```

## Create treament variable
```{r}
meta_sorted$treatment <- as.factor(paste0(meta_sorted$Sample_type, "_", meta_sorted$Water_type))
levels(meta_sorted$treatment)
meta_sorted$treatment <- factor(meta_sorted$treatment, 
                                levels = c("No_plant_Artificial_OSPW", "No_plant_OSPW", "Carex_OSPW"), 
                                labels = c("No_plant_CTRL", "No_plant_OSPW", "Carex_OSPW"))
```


********************************************************
# TAXONOMY (RAREFIED)
# ********************************************************

## Create tax_rar table for rarefied data
```{r}
dim(rarefied) # 2956 and  58 OK
tax_rar <- as.data.frame(rarefied[,ncol(rarefied)]) # taxonomy obtained from last column as independent table
otuids <- rownames((rarefied))
rownames(tax_rar) <- otuids
names(tax_rar) <- c("taxonomy")
```

## Separate tax_rar into groups
```{r}
tax_rar_clean <- separate(tax_rar, taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax_rar_clean <- tax_rar_clean[,-which(names(tax_rar_clean) %in% c("Species", "Strain"))]
tax_rar_clean <- as.data.frame(tax_rar_clean)
levels(as.factor(tax_rar_clean$Domain)) # 3 Domain 
levels(as.factor(tax_rar_clean$Phylum)) #  39 Phyla 
levels(as.factor(tax_rar_clean$Class)) # 87 classes
levels(as.factor(tax_rar_clean$Order)) # 201 orders
levels(as.factor(tax_rar_clean$Family)) # 321 Families
levels(as.factor(tax_rar_clean$Genus)) # 617 genus
str(tax_rar_clean)
```


********************************************************
# TAXONOMY (RAW COUNTS)
# ********************************************************

## Create tax_raw table for raw data
```{r}
dim(raw) # 2957 and  59 OK
tax_raw <- as.data.frame(raw[,ncol(raw)]) # taxonomy obtained from last column as independent table
otuids <- rownames((raw))
rownames(tax_raw) <- otuids
names(tax_raw) <- c("taxonomy")
```

## Separate tax_raw into groups
```{r}
tax_raw_clean <- separate(tax_raw, taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax_raw_clean <- tax_raw_clean[,-which(names(tax_raw_clean) %in% c("Species", "Strain"))]
tax_raw_clean <- as.data.frame(tax_raw_clean)
levels(as.factor(tax_raw_clean$Domain)) # 3 Domain 
levels(as.factor(tax_raw_clean$Phylum)) #  39 Phyla 
levels(as.factor(tax_raw_clean$Class)) # 87 classes
levels(as.factor(tax_raw_clean$Order)) # 201 orders
levels(as.factor(tax_raw_clean$Family)) # 321 Families
levels(as.factor(tax_raw_clean$Genus)) # 617 genus
str(tax_raw_clean)
```


********************************************************
# CLEAN TABLES (RAREFIED)
# ********************************************************
## Filter ASVs 
that do not correspond to Bacteria and Archaea
The preliminary check at Domain level reveal that up to 3 domains have been retained: Archaea, Bacteria and Eukaryota. 
```{r}
eukaryotas <- rarefied[grep("Eukaryota",rarefied$taxonomy),] 
#View(eukaryotas)
dim(eukaryotas) # 12 ASVs -- Cryptomycota
```

Exclude Eukaryotas
```{r}
rarefied_counts <- rarefied[!grepl("Eukaryota",rarefied$taxonomy),] 
```

Same in taxonomy
```{r}
taxonomy_clean <- as.data.frame(taxonomy[rownames(taxonomy) %in% rownames(rarefied_counts),])
names(taxonomy_clean) <- c("Taxonomy")
tax_clean <- as.data.frame(tax.clean[rownames(tax.clean) %in% rownames(rarefied_counts),])
rm(list = c("tax.clean", "taxonomy", "rarefied"))
rownames(taxonomy_clean) <- rownames(rarefied_counts)
```

## Clean taxonomy names
```{r}
# eliminate the characters  -----
pattern <- "[a-z]__"
replacement <- ""
tax_clean <- as.data.frame(apply(tax_clean, 2, function(col) gsub(pattern, replacement, col)))
#write.table(tax.clean, file = here::here("data", "clean", "clean_taxonomy.txt"),sep = "\t")
rm(pattern)
rm(replacement)
rownames(tax_clean) <- rownames(rarefied_counts)
```

```{#r}
## Collate ASVs with good taxonomy
# collate otus with clean taxonomy table
rarefied_bis = cbind(rarefied[,1:ncol(rarefied)-1], tax.clean)
### tyding up
rm(otuids)
rm(taxonomy)
rm(rarefied)
```


# CLEAN TABLES (RAW)
# ********************************************************
## Filter ASVs 
that do not correspond to Bacteria and Archaea
The preliminary check at Domain level reveal that up to 3 domains have been retained: Archaea, Bacteria and Eukaryota. 
```{r}
eukaryotas <- raw[grep("Eukaryota",raw$taxonomy),] 
#View(eukaryotas)
dim(eukaryotas) # 12 ASVs -- Cryptomycota
```

Exclude Eukaryotas
```{r}
raw_counts <- raw[!grepl("Eukaryota",raw$taxonomy),] 
```


## Set diff
```{r}
A <- raw_counts
B <- rarefied_counts
rownames(A) <- raw_counts$taxonomy
rownames(B) <- rarefied_counts$taxonomy
unique_taxa_rarefied <- unique(rarefied$taxonomy)
unique_taxa_raw <- unique(raw$taxonomy)
setdiff(colnames(raw_counts), colnames(rarefied_counts))
setdiff(rownames(raw_counts), rownames(rarefied_counts))
setdiff(rownames(raw_counts), rownames(rarefied_counts))
```


********************************************************
# ABUNDANCE TABLE (RAREFIED)
# ********************************************************

## Transpose
```{r}
com <- rarefied_counts[,1:(ncol(rarefied_counts)-1)] # create community table with asv table with only abundances not taxonomy
com_t = t(com) # transposing table, samples as rows, species as columns to match metadata
```

## Keep only defined treatments as in metadata
```{r}
com_s <- com_t[rownames(com_t) %in% rownames(meta_sorted),]
meta_sorted <- meta_sorted[rownames(meta_sorted) %in% rownames(com_s),]
```

## Order table and check
```{r}
com_sorted <- com_s[order(row.names(com_s)),]
rownames(meta_sorted) == rownames(com_sorted)
```

## Tidy environment
```{r}
rm(list = c("otuids", "com_t", "com_s", "eukaryotas", "com"))
```


********************************************************
# ABUNDANCE TABLE (RAW)
# ********************************************************

## Transpose
```{r}
com_raw <- raw_counts[,1:(ncol(raw_counts)-1)] # create community table with asv table with only abundances not taxonomy
com_raw_t = t(com_raw) # transposing table, samples as rows, species as columns to match metadata
```

## Keep only defined treatments as in metadata
```{r}
com_raw_s <- com_raw_t[rownames(com_raw_t) %in% rownames(meta_sorted),]
meta_sorted <- meta_sorted[rownames(meta_sorted) %in% rownames(com_raw_s),]
```

## Order table and check
```{r}
com_raw_sorted <- com_raw_s[order(row.names(com_raw_s)),]
rownames(meta_sorted) == rownames(com_raw_sorted)
```

## Tidy environment
```{r}
rm(list = c("otuids", "com_t", "com_s", "eukaryotas", "com"))
```

# ********************************************************
## Save RDS objects
```{r}
save(meta_sorted, com_sorted,com_raw_sorted, tax_clean, file = here::here("RData", "DA_data.RData"))
```

##Export only once
```{r}
#save.image(file = here::here("source", "clean_Data_rarefied.RData"))
```

********************************************************
# END OF SCRIPT
# ********************************************************

