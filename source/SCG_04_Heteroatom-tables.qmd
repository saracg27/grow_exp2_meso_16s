---
title: "13_Create-heteroatom-species-table"
format: html
editor: source
author: "Ian Vander Meulen & Sara Correa Garcia"
---

This code has been modified from the one shared by our colleague Ian Vander Meulen. We reproduce some steps, with minor changes.
First, we modify the original metadata in excel, to include the same column names as in our genomic mapping file (specially sample IDs) and the same sampling time points.
We drop NAs
Then, we modify the colums excluded in the importing process.
Finally, we pivot the table and export the objects.

# Libraries
```{r}
if (!requireNamespace("pacman", quietly = TRUE)) {
  install.packages("pacman")
}
pacman::p_load(
  tidyverse, plyr, dplyr, tidyr, readr, ggplot2, devtools, readxl, 
  openxlsx, viridis, ggrepel, ggpmisc, stringr, ggbiplot, colorRamps, patchwork
)
```

# Data import

## Import metadata
```{r}
# Importing the quantitative data for the mesocosm studies
Exp2_quan <- read_excel(path = here::here("data", "raw","20231010_DaniExp2_Code", "20220906_Exp2_SampleKey_mod.xlsx"))
```

## Import Chemical values
```{r}
# Define the data file we're interested in
Data_location <- here::here("data", "raw","20231010_DaniExp2_Code","20220906_Exp2_ComposerDetailed_mod.xlsx")
Formulae_variables <- colnames(read_xlsx(Data_location, skip = 2, trim_ws = TRUE, sheet = 1))

# Define function to import all the excel sheets on the data needed
repeat_import <- function(data_path, Row.skip = 2){
  library(readxl)
  sheetnames_file <- openxlsx::getSheetNames(data_path)
  Formulae_variables <- colnames(read_xlsx(data_path, skip = 2, trim_ws = TRUE, sheet = 1))
  
  Data_superstructure <- list()
  for(x in 1:length(sheetnames_file)){
    SheetName <- paste(sheetnames_file[x])
    new_frame <- read_excel(data_path, skip = Row.skip, trim_ws = TRUE, sheet = x)
    colnames(new_frame) <- Formulae_variables
    new_frame$Rel_abund <- (new_frame$`Total Abund`)/max(new_frame$`Total Abund`)
    # Need to add relative abundance data to each sheet prior to adding them into the larger lists
    Data_superstructure[[SheetName]] <- new_frame
  }
  rm(new_frame)
  return(Data_superstructure)
}

# Import data
Dani_Exp2_Sheets <- repeat_import(Row.skip = 2, data_path = Data_location)
```


```{r}
# Form a "master list" of formulae found in each of these sampling years, assign
# Kendrick masses and defects

Formula_list <- function(data_list){
  Formulae_variables <- colnames(data_list[[1]])
  # Name all of the sheets we'll use
  sheetnames <- names(data_list)
  # Making a list we will fill with sample data
  Master_formula_list <- list()
  # Start the loop to import every sheet of sample data and include it in the list,
  # stripping out unique identifiers. This will run for as many sheets as we've included
  for(i in 1:length(data_list)){
    # Define the name for this particular sheet
    SheetName <- paste(sheetnames[i])
    # Pull the relevant sheet from the previously defined list (sheet "i")
    present_sheet <- as.data.frame(data_list[paste(sheetnames[i])])
    # Ensure that column names are uniform for when data are bound together later
    colnames(present_sheet) <- Formulae_variables
    # Subset the data, taking only molecular properties that are universally "true" across
    # different samples
    new_formulae <- present_sheet[,c("Class","DBE","Neutral DBE","Formula",
                                     "Calc m/z", "Z Number", "#C", "#H", "#N", "#O",
                                     "#S", "H/C", "N/C", "O/C", "S/C")]
    # Bind the trimmed data into the list for later arrangement
    Master_formula_list[[SheetName]] <- new_formulae
  }
  # "do.call" is just a way to say "do this operation using all members of the list",
  # so this stacks every dataframe in the list into a single (long) dataframe based on 
  # everything in there. I don't 100% understand "do.call," so further help may require
  # google
  Master_formulae <- do.call(rbind, Master_formula_list)
  # Remove redundant formula information with the unique() function, which removes
  # redundant rows
  Master_formulae <- unique(Master_formulae)
  # Need to recalculate the Kendrick mass based on the calculated m/z. The assigned
  # Kendrick masses were calculated based on experimental m/z, which fluctuates slightly
  Master_formulae$`Kendrick mass` <- Master_formulae$`Calc m/z`*(14/14.01565)
  # KMD is calculated based on Kendrick mass, so also needs recalculating
  Master_formulae$KMD <- ceiling(Master_formulae$`Kendrick mass`)-Master_formulae$`Kendrick mass`
  # Just cleaning up messy row names
  row.names(Master_formulae) <- c(1:nrow(Master_formulae))
  # Give us the new arrangement we just asked for
  return(Master_formulae)
}

Dani_Exp2_formulae <- Formula_list(Dani_Exp2_Sheets)


```




Our sample key: Exp2_quan

Our data list: Dani_Exp2_Sheets

Our unique formulae: Dani_Exp2_formulae

We have all this formula-abundance data imported, and we COULD go back to the Composer summary data, buuuuuut we have fancy tools at our disposal to collapse down this information ourselves, so we will.

## Create heteroatome_frame_build function
```{r}
heteroatom_frame_build <- function(data_list, sample.info.frame){
  # Defining those compounds that are typically the most interesting in these datasets
  oxygenates <- c("O","O2","O3", "O4", "O5", "O6", "O7", "O8", "O9", "O10",
                  "S", "S2", "S3", "S4","S5", "OS", "O2S", "O3S")
  
  # Build a function that summarizes the percent heteroatom distributions for one sample at a time,
  # we can loop in later on
  Heteroatom_collapse <- function(data_frame, sample.info.frame){
    # Find all the unique classes in that particular dataframe
    Classes <- unique(data_frame$Class)
    # Create an empty structure to fill the simplified dataframe we'll build later
    class_stack <- list()
    
    # Run a loop to summarize particular heteroatom data
    for(i in 1:length(Classes)){
      # Isolate particular class data
      Class_x <- data_frame[data_frame$Class == Classes[i],]
      # Create a row that we fill with the data we're interested in, which
      # implies removing particular identifying data (i.e., unique to each formula)
      row_x <- as.data.frame(Class_x[1,"Class"])
      # Summarize the abundance data we're going to use
      row_x$total_abund <-sum(Class_x$`Total Abund`)
      class_stack[[i]] <- row_x
    }
    heteroatom_stack <- do.call(rbind, class_stack)
    # Summarize percent abundance for that sample
    heteroatom_stack$percent_abund <- (heteroatom_stack$total_abund)/sum(heteroatom_stack$total_abund)
    return(heteroatom_stack)
  }
  
  # We have a working "collapse" function. Huzzah.
  # Find the names of all the objects in your list
  Sheet_names <- names(data_list)
  # Repeatedly apply the heteroatom collapse function, put it into another list
  Sample_list <- list()
  for(j in 1:length(Sheet_names)){
    sheet_x <- data_list[[j]]
    collapse_x <- Heteroatom_collapse(sheet_x)
    collapse_x <- cbind(collapse_x,sample.info.frame[j,]) # Sara erased the 4 index in this -c(2,4) to ensure that the info on Mesocosms is retained
    collapse_x$Set <- rep(paste(collapse_x$Plants,
                                collapse_x$Temp, 
                                as.character(collapse_x$`Day`),
                                sep = "_"))
    Sample_list[[j]] <- collapse_x
  }
  Sample_summary <- do.call(rbind, Sample_list)
  
  oxygenates <- c("O","O2","O3", "O4", "O5", "O6", "O7", "O8", "O9", "O10",
                  "S", "S2", "S3", "S4","S5", "OS", "O2S", "O3S")
  
  reclass <- vector()
  for(k in 1:nrow(Sample_summary)){
    if(Sample_summary$percent_abund[k] >= 0.01){
      reclass <- c(reclass, Sample_summary$Class[k])
    }else{
      reclass <- c(reclass, "Other")
    }
  }
  Sample_summary$classf <- factor(reclass,
                                         levels = c(oxygenates,
                                                    (setdiff(unique(reclass), c(oxygenates,"Other"))), 
                                                    "Other"), ordered = TRUE)
  
  return(Sample_summary)
}
```

# Create heteroatom table
```{r}
DDExp2_Heteroatom_Summary <- heteroatom_frame_build(
    data_list =  Dani_Exp2_Sheets,
    sample.info.frame = Exp2_quan)
dim(DDExp2_Heteroatom_Summary) # creates a 1726   15 table
DDExp2_Heteroatom_Summary2 <- drop_na(DDExp2_Heteroatom_Summary)
dim(DDExp2_Heteroatom_Summary2) # creates a 1197   15 table
```

Pivot for total abundance
```{r}
# Pivot wider to match metadata distribution
DDExp2_Heteroatom_wide_totalAbund <- pivot_wider(DDExp2_Heteroatom_Summary2,
                                               id_cols = c("SampleID"),
                                               names_from = c("Class"),
                                               values_from = "total_abund",
                                               values_fill = 0)

result_total <- full_join(Exp2_quan, DDExp2_Heteroatom_wide_totalAbund, by = "SampleID")
```


```{#r}
saveRDS(DDExp2_Heteroatom_Summary2, "DDExp2_Heteroatom_Summary2.rds")
saveRDS(result_total, "mapping_heteroatoms_totalAbund.rds")
saveRDS(DDExp2_Heteroatom_wide_totalAbund, "heteroatom_species_env_totalAbund.rds")

```
Pivot for relative abundance
```{r}
# Pivot wider to match metadata distribution
DDExp2_Heteroatom_wide_percentAbund <- pivot_wider(DDExp2_Heteroatom_Summary2,
                                               id_cols = c("SampleID"),
                                               names_from = c("Class"),
                                               values_from = "percent_abund",
                                               values_fill = 0)

result_percent <- full_join(Exp2_quan, DDExp2_Heteroatom_wide_percentAbund, by = "SampleID")
```


```{#r}
saveRDS(result_percent, "mapping_heteroatoms_percentAbund.rds")
saveRDS(DDExp2_Heteroatom_wide_percentAbund, "heteroatom_species_env_percentAbund.rds")
```

```{r}
boxplot <- ggplot(data = result_total, 
                  aes(x = as.factor(Day), y = O2, fill = as.factor(Day)), 
                  ) +
  geom_boxplot() +
  scale_fill_manual(values = c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF")) +
  facet_wrap(~Plant.type+Temperature, nrow = 1) +
  theme(
    legend.position = "none"
  )
boxplot
```

```{r}
library(ggtext)
result_total$Plant.type <- factor(result_total$Plant.type, levels = c("no plant", "Scirpus", "Triglochin"),
                                labels = c("no plant", "*Scirpus*", "*Triglochin*"))
boxplot_NA <- ggplot(data = result_total, 
                  aes(x = as.factor(Day), y = `NAFCs (mg/L)`, fill = as.factor(Day), color= as.factor(Day) ), 
                  ) +
  geom_boxplot(alpha = 0.8) +
  scale_fill_manual(values = c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF")) +
  scale_color_manual(values = c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF")) +
  xlab("Day") +
  theme(
    axis.line = element_line(colour = "black", linewidth = 0.5),
    axis.title = element_text(face = "bold", size = 8),
    axis.text = element_text(face = "bold", size = 7),
    strip.background = element_rect(fill = "white", color = "white"),
    strip.text = element_markdown(linewidth = 10, face = "bold", size = 8),
    panel.background = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = .3), 
    legend.position = "none"
    
  ) +
  facet_grid(Temperature~Plant.type,)

boxplot_NA
ggsave(here::here("output", "figures", "NA.png"), boxplot_NA, width = 3.5, height = 3.5, dpi = 300, units = "in")
```

# Relative abundance O2
```{r}
boxplot_O2S <- ggplot(data = result_percent, 
                  aes(x = as.factor(Day), y = O2S, fill = as.factor(Day), color= as.factor(Day) ), 
                  ) +
  geom_boxplot(alpha = 0.8) +
  scale_fill_manual(values = c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF")) +
  scale_color_manual(values = c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF")) +
  xlab("Day") +
  theme(
    axis.line = element_line(colour = "black", linewidth = 0.5),
    axis.title = element_text(face = "bold", size = 8),
    axis.text = element_text(face = "bold", size = 7),
    strip.background = element_rect(fill = "white", color = "white"),
    strip.text = element_markdown(linewidth = 10, face = "bold", size = 8),
    panel.background = element_blank(),
    panel.border = element_rect(color = "black", fill = NA, size = .3), 
    legend.position = "none"
    
  ) +
  facet_grid(Temperature~Plant.type,)

boxplot_O2S
ggsave(here::here("output", "figures", "02.png"), boxplot_o2, width = 3.5, height = 3.5, dpi = 300, units = "in")
```


