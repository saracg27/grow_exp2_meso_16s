---
title: "RDA on total abundance of heteroatoms"
author: "Sara Correa Garcia"
format: html
editor: 
  markdown: 
    wrap: 72
---

# Libraries

```{r}
#devtools::install_github("vmikk/metagMisc")
source(here::here("source", "libraries.R"))
library(dplyr)
library(phyloseq)
library(metagMisc)
library(corrplot)
```

# Get data

```{r}
load(here::here("RData", "Sediment_data.RData"))
load(here::here("RData", "ps.RData"))
heteroatoms <- readRDS(here::here("RData", "mapping_heteroatoms_totalAbund.rds"))
otu <- as.data.frame(ps@otu_table)
meta <- as.data.frame(ps@sam_data)
tax <- as.data.frame(ps@tax_table)
```

# Wrangling

### Set rownames in heteroatoms

```{r}
heteroatoms <- as.data.frame(heteroatoms)
rownames(heteroatoms) <- heteroatoms$SampleID
rownames(heteroatoms) <- gsub("-", ".", rownames(heteroatoms))
dim(heteroatoms) # There are 110 samples and 53 variables
```

### Erase, recode, standardize variables

```{r}
heteroatoms$Day <- as.factor(heteroatoms$Day)
heteroatoms_z <- heteroatoms |> 
    select(-c("SampleID", "File Name", "Mesocosms..", "Temp", 
           "Greenhouse", "Sample.type", "Day_microbiome")) |> 
    mutate_if(~!is.numeric(.), as.factor) |> 
    mutate_if(is.numeric, scale)    # standardize
    
heteroatoms_z |> 
    summarise_if(is.numeric, list(mean = ~round(mean(.)), std = ~sd(.))) # Check it work

dim(heteroatoms_z) # should be 110 in 46 vars
```

### subset our data (120 samples) based on the samples present in heteroatoms (110)

```{r}
class(meta)
meta <- as.data.frame(meta)
meta_sub <- heteroatoms_z[,!sapply(heteroatoms_z, is.numeric)] 
otu_sub <- otu[ ,colnames(otu) %in% rownames(meta_sub)] # 109 samples
otu_sub <- otu_sub[rowSums(otu_sub) > 0, ]
tax_sub <- tax[rownames(tax) %in% rownames(otu_sub),]
#18851 - 18475 = 376 came from the samples in D40 that have been lost
dim(meta_sub) #110   3
dim(otu_sub) #18475   109
meta_sub <- meta_sub[rownames(meta_sub) %in% colnames(otu_sub),]
```

## New PHYLOSEQ Object to agglom at genus

Create a new phyloseq with the samples that were kept for the NA
analyses

```{r}
otu <- otu_table(as.matrix(otu_sub), taxa_are_rows = TRUE)
tax <- tax_table(as.matrix(tax_sub))
sample <- sample_data(meta_sub)
colnames(sample)[colnames(sample) == "Day"] <- "Time"
rm(ps)
# merge: 
ps <- phyloseq(otu, tax, sample)
```

## Agglom at genus

```{r}
ps_taxa <- tax_glom(ps, taxrank = 'Genus', NArm = FALSE) # 1037 instead 1046 after loosing 11 samples
```

## Extract agglomerated tables at genus to run RDA
Change col names, R doesn't allow for columns to start by a number. Avoids error in next line of code: Sample names in 'physeq' could not be automatically converted to the syntactically valid column names in data.frame (see 'make.names')
```{r}
sample_names(ps_taxa) <- paste0("x_", sample_names(ps_taxa)) 
ps_taxa_df <- phyloseq_to_df(ps_taxa) 
heteroatoms_z <- heteroatoms_z[rownames(heteroatoms_z) %in% rownames(meta_sub),] # ensure the same samples are in otu and meta
# make row names in heteroatoms match column names in ps_taxa_df
rownames(heteroatoms_z) <- paste0("x_", rownames(heteroatoms_z))
rownames(heteroatoms) <- paste0("x_", rownames(heteroatoms))
# Get the taxonomy apart tax_g
tax_g <- ps_taxa_df[,1:7]
rownames(tax_g) <- tax_g$OTU
tax_g$OTU <- NULL

# Extract otu_g
rownames(ps_taxa_df) <- ps_taxa_df$OTU
otu_g <- ps_taxa_df[, sapply(ps_taxa_df, is.numeric)]

# get meta_g
meta_g <- heteroatoms_z

# Check that names in match
meta_g <- meta_g[order(row.names(meta_g)),]

otu_g <- otu_g[, order(colnames(otu_g))]
rownames(meta_g) == colnames(otu_g)
otu_g <- t(otu_g)
meta_g <- meta_g[rownames(meta_g) %in% rownames(otu_g)]
rownames(meta_g) == rownames(otu_g)
```

Clean environment out of variables that are not needed anymore before moving into the next part of the analyses
```{r}
rm(list = c("genus_sed", "meta", "meta_sed", "phylum_sed", "tax_clean"))
```



# Variation partitionning

If we partition the variance in treatments (day, temperature,
plant.type), NA concentration, and heteroatoms, how well can we explain
the microbial community composition?

## Transform: relabund, hell, aitch

```{r}
rel_otu <- decostand(otu_g, method = "total") # relative abundance
apply(rel_otu, 1, sum) # Check. to 1

otu_hell <- decostand(otu_g, method = "hellinger") # hellinger
```

## Set heteroatoms

```{r}
meta_g <- meta_g[rownames(meta_g) %in% rownames(otu_g),]
atoms <- meta_g[,5:ncol(meta_g)]
```

## Set NA concentration

```{r}
na <- meta_g[,4]
```

## Set treatments

```{r}
treat <- meta_g[,1:3]
```

## Varpart

```{r}
varpart1 <- varpart(otu_g, atoms, na, treat, transfo = 'hellinger', scale = F)
summary(varpart1)
varpart1

png(filename = here("output", "figures", "varpart_all-variables.png"))
showvarparts(3, bg=2:4)
plot(varpart1, bg=2:4, cutoff = -Inf)
dev.off()

```

Warning messages: 1: collinearity detected: redundant variable(s)
between tables X1, X3 results are probably incorrect: remove redundant
variable(s) and repeat the analysis 2: collinearity detected: redundant
variable(s) between tables X1, X2, X3 results are probably incorrect:
remove redundant variable(s) and repeat the analysis

We need to check for multicollinearity and redo the analysis. \### Check
for autocorrelation

```{r}
# Keep only the variables that were retained for the paper
atoms_sel <- c("O", "O2", "O3", "O4", "O5", "O6", "O7", "S", "OS", "O2S", "O3S", "N2O3", "NO6", "N2", "N2O3S", "N2S", "O2S2")
atoms_reduced <- heteroatoms[,colnames(heteroatoms) %in% atoms_sel]
any(is.na(atoms_reduced))
str(atoms_reduced)
# We look at the pairwise correlation among ALL the explanation variables
corr_values <- round(cor(atoms_reduced, method = "spearman"), 2) # Calculate correlation

png(filename = here("output", "figures", "heteroatoms-selection_heatmap_totalabund.png"))
plot_cor <- corrplot(corr_values,
                     method = "circle",
                     type = "lower",
                     insig = "blank",
                     number.cex = 0.6,
                     order = "hclust",
                     addrect = 2,
                     diag = FALSE,
                     cl.ratio = 0.2, # justify iwdth of legend
                       tl.cex = 0.7,
                       tl.col = "black",
                       tl.srt = 45,
                       col = COL2('PuOr', n = 10),
                       title = "Spearman correlation between heteroatom abundance")
dev.off()
```

## Identify and select variables to retain (e.g., based on high correlation threshold)
```{r}
high_correlation_threshold <- 0.7

# reduce size of corr matrix
melt_corr <- reshape2::melt(corr_values)

# Identify correlation pairs with high correlation values
correlation_pairs <- melt_corr[which(melt_corr$value > high_correlation_threshold & melt_corr$value < 1),] 


# Create a unique identifier for each pair
correlation_pairs_filtered <- correlation_pairs %>%
  rowwise() %>%
  mutate(pair_id = paste(sort(c(Var1, Var2)), collapse = "-")) %>%
  ungroup()

# Filter out duplicate pairs based on the unique identifier
unique_data <- correlation_pairs_filtered %>%
  distinct(pair_id, .keep_all = TRUE)

# Remove the pair_id column if no longer needed
unique_data <- unique_data %>%
  select(-pair_id)

unique(unique_data$Var1) # O   S   OS  O7  O3S O2S O4  O5  N2S
unique(unique_data$Var2) # N2O3 O    O2   O3   O4   N2   S    O7

```

After visual examination of the significantly correlated pairs (rho \>
0.7), the relationships between heteroatom groups are:

| Heteroatom | highly (rho \> 0.7) correlated with: | KEEP |
|------------|--------------------------------------|------|
| O          | N2O3, O7, OS, S                      | yes  |
| N2O3       | O, S                                 | no   |
| O7         | O, N2S                               | no   |
| S          | N2O3, O, OS                          | no   |
| OS         | O, S                                 | no   |
| O3S        | O2                                   | no   |
| O2S        | N2, O2                               | no   |
| O4         | O3, O5                               | no   |
| O5         | O3, O4                               | no   |
| O3         | O4, O5                               | yes  |
| N2S        | O7                                   | yes  |
| O2         | O2S, O3S                             | yes  |
| N2         | O2S                                  | yes  |

The heteroatoms that are to be kept for RDA consists of the ones that
are marked yes (retain the changes of the list of 13 colinear) plus the
ones not highly correlated.

```{r}
# Keep only the variables that were retained for RDA
atoms_sel1 <- c("O", "O2", "O6",  "NO6", "N2", "N2O3S", "N2S", "O2S2")
atoms_reduced2 <- heteroatoms[,colnames(heteroatoms) %in% atoms_sel1]
any(is.na(atoms_reduced2))
dim(atoms_reduced2) # 110   8
```

Now, check multicolinearity again:
```{r}
# We look at the pairwise correlation among ALL the explanation variables
corr_values2 <- round(cor(atoms_reduced2, method = "spearman"), 2) # Calculate correlation

png(filename = here("output", "figures", "heteroatoms-selection_heatmap_totalabund2.png"))
plot_cor2 <- corrplot(corr_values2,
                     method = "circle",
                     type = "lower",
                     insig = "blank",
                     number.cex = 0.6,
                     order = "hclust",
                     addrect = 2,
                    addCoef.col = TRUE,
                     diag = FALSE,
                     cl.ratio = 0.2, # justify iwdth of legend
                       tl.cex = 0.7,
                       tl.col = "black",
                       tl.srt = 45,
                       col = COL2('PuOr', n = 10),
                       title = "Spearman correlation between heteroatom abundance2")
dev.off()
```


## Varpart with atoms_reduced2

```{r}
atoms_reduced2 <- atoms_reduced2[rownames(atoms_reduced2) %in% rownames(otu_g),]
varpart2 <- varpart(otu_g, atoms_reduced2, na, treat, transfo = 'hellinger', scale = F, permutations = 999)
summary(varpart2)
varpart2

png(filename = here("output", "figures", "varpart_all-variables2.png"))
showvarparts(3, bg=2:4)
plot(varpart1, bg=2:4, cutoff = -Inf)
dev.off()
```


# Compute RDA

## Dissimilarity distance calculations

```{r}
# calculate Bray-Curtis distance among samples
otu_g_bc <- vegdist(rel_otu, method = "bray")
otu_g_bc_sqrt <- sqrt(vegdist(rel_otu, method = "bray")) #Eliminate negatives by sqrt transformation

# calculate Robust Aitchison distance among samples
otu_g_rait <- vegdist(otu_g, method = "robust.aitchison") # robust clr transformtion + Euclidean distance

# calculate Hellinger distance among samples
otu_hell_dist <- vegdist(otu_hell, method = "euclidean") 
```

```{#r}
# Results from this rda are similar to squared root bray curtis, so keep sqrt
rda_res <- dbrda(otu_g_bc ~ ., 
                 data = atoms_reduced2,
                 add = "lingoes")
anova(rda_res, permutations = how(nperm = 999))
rda1_summary <- summary(rda_res)
rda1_summary
print(rda_res)
```

```{r}
set.seed(123)
rda2 <- dbrda(otu_g_bc_sqrt ~ ., 
                 data = atoms_reduced2)
anova(rda2, permutations = how(nperm = 999))
summary(rda2)
print(rda2)
adjR2.tbrda <- RsquareAdj(rda2)$adj.r.squared #0.0217 adjusted R2 explained
```

# RDA on factors and NA levels

## Selection of variables with ordi2step

### compute models

```{r}
# Create simplest and most complex models
rda0_1 <- dbrda(otu_g_bc_sqrt ~ 1, data = meta_g[,1:4])
rdaall_1 <- dbrda(otu_g_bc_sqrt ~ Plant.type + `NAFCs (mg/L)` + Temperature + Day, data = meta_g[,1:4]) # exact same as rda2

anova(rdaall_1, permutations = how(nperm = 999))
summary(rdaall_1)
print(rdaall_1)
adjR2.tbrda1 <- RsquareAdj(rdaall_1)$adj.r.squared #0.1807 adjusted R2 explained

rdaall_na <- dbrda(otu_g_bc_sqrt ~ `NAFCs (mg/L)`, data = meta_g[,1:4])
anova(rdaall_na, permutations = how(nperm = 999))
summary(rdaall_1)

```

### perform ordistep

```{r}
sel_f1 <- ordiR2step(object = rda0_1,
                    scope = rdaall_1,
                    R2scope = adjR2.tbrda1)
sel_f1$anova


png(filename = here("output", "figures", "ordiplot.png"))

ordiplot(sel_f1, display = c('sites', 'bp'),type = "points",)

dev.off()

```

# RDA on ALL variables

## Selection of heteroatom variables with ordi2step

### compute models

```{r}
atoms_reduced2 <- atoms_reduced2[order(rownames(atoms_reduced2)), ]
rownames(atoms_reduced2) == rownames(meta_g)
meta_select <- cbind(meta_g$Day, meta_g$Temperature, meta_g$Plant.type, atoms_reduced2)
names(meta_select) <- c("Day", "Temperature", "Plant.type", "NO6", "O", "O2", "O6", "N2", "N2O3S", "N2S", "O2S2")

# Create simplest and most complex models
rda0_full <- dbrda(otu_g_bc_sqrt ~ 1, data = meta_select)
rdaall_full <- dbrda(otu_g_bc_sqrt ~ ., data = meta_select) # exact same as rda2
anova(rdaall_full, permutations = how(nperm = 999))
print(rdaall_full)
adjR2.tbrdafull <- RsquareAdj(rdaall_full)$adj.r.squared #0.1873 adjusted R2 explained
smry <- summary(rdaall_full)

#Perform ordistep
sel_full <- ordiR2step(object = rda0_full,
                    scope = rdaall_full,
                    R2scope = adjR2.tbrdafull)
sel_full$anova
sel_full$call
adjR2.tbrdaselected <- RsquareAdj(sel_full)$adj.r.squared #0.1873 adjusted R2 explained


# Perform RDA with selected variables
rda_select <- dbrda(formula = otu_g_bc_sqrt ~ Day + Plant.type, data = meta_select)
anova(rda_select, permutations = how(nperm = 999),by = "term")
print(rda_select)
adjR2.tbrda_select <- RsquareAdj(rda_select)$adj.r.squared #0.1798 adjusted R2 explained
smry <- summary(rda_select)
```

# Create GGPLOT RDA for all retained variables with ggplot

## Extract coordinates
```{r}
biplot <- data.frame(smry$biplot[,1:2])
dim(biplot) # 6 2
rownames(biplot) <- c("10", "16", "35", "62", "italic(Scirpus)", "italic(Triglochin)")

sites <- data.frame(smry$sites[,1:2])
dim(sites) # 109   2
# merge metadata to sites
if (all(rownames(sites) == rownames(meta_g))) { 
    sites <- cbind(sites, meta_g[,1:3])
} else {
        print("diff row names")
    }

constraints <- data.frame(smry$constraints[,1:2])
dim(constraints) # 109 2
# merge metadata to constrains
if (all(rownames(constraints) == rownames(meta_g))) { 
    constraints <- cbind(constraints, meta_g[,2:3])
} else {
        print("diff row names")
    }

centroids <- data.frame(smry$centroids[,1:2])
dim(centroids) # 8 2
rownames(centroids) <- c("0", "10", "16", "35", "62", "no plant", "Scirpus", "Triglochin")
```

## Reset variables
```{r}
high_contrast <- c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF") 
sites$Plant.type <- factor(sites$Plant.type, levels = c("no plant", "Scirpus", "Triglochin"),
                                labels = c("no plant", "*Scirpus*", "*Triglochin*"))

names(sites)[names(sites) == 'Plant.type'] <- 'Conditions'
```


## plot the biplot

```{r}
rda.biplot <- ggplot(data = sites,
                                 aes(x = dbRDA1, y = dbRDA2)) + 
    geom_point(aes(fill = factor(sites$Day),
                   shape = sites$Conditions),
               size = 4, colour = "grey40") +
    scale_fill_manual(values = c("#000004FF", "#721F81FF" ,"#B63679FF" ,"#F1605DFF", "#FEAF77FF")) + 
    scale_shape_manual(values = c(21,22,23),name = "Conditions") +
    geom_hline(yintercept=0, linetype="dotted") +
    geom_vline(xintercept=0, linetype="dotted") +
    coord_fixed() +
    geom_segment(data = biplot, 
                 aes(x = 0, xend = dbRDA1 * 2, y = 0, yend = dbRDA2 * 2), 
                 color = "black", 
                 arrow = arrow(length = unit(0.1, "cm"))) + 
    geom_text(data = biplot, 
              aes(x = dbRDA1 * 2, y = dbRDA2 * 2,label = rownames(biplot),
                  hjust = 0.5 * (1 - sign(dbRDA1)), 
                  vjust = 0.5 * (1 - sign(dbRDA2))), 
              color = "black", size = 4, parse = TRUE) +
    theme_classic() +
    xlim(-1.1, 2.2) +
    theme(panel.background = element_blank(),
          legend.position = "right",
          legend.text = element_markdown(size = 10),
          axis.title = element_text(size = 10)) + 
    guides(fill = guide_legend(override.aes=list(shape = 21), title = "Day"),
           shape = guide_legend(override.aes=list(fill = "grey40"))) 
rda.biplot
ggsave(filename = here("output", "figures", "rda_selected_vars_bray-curtis.eps"), plot = rda.biplot, height = 5, width = 5)
```




