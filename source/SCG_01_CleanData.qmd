---
title: "Clean Data"
format: html
editor: source
---

------------------------------------------------------------------------

# LOAD PACKAGES & DATA

# ------------------------------------------------------------------------

## Packages

```{r}
library(here)
source(here("source", "libraries.R"))
```

## Metadata

```{r}
meta <- read.csv(file = here("data","clean", "metadata.tsv"), dec = ".", header = T, row.names = 1, sep = "\t", comment.char = "") #load
str(meta)
## Convert character vectors to factors
meta[sapply(meta, is.character)] <- lapply(meta[sapply(meta, is.character)], as.factor) # did it work? Check with str(meta)
#rownames(meta) <- sub(".*i5_", "", rownames(meta))
rownames(meta) <- stringr::str_replace_all(rownames(meta), '[-]', '.')
```

Explore for negative controls. After visual exploration in scripts 00_explore_neg_controls.R and 001_relAbund_neg_controls.R, we decide (Simon Morvan and I) to move forward without substracting ASVs from samples. 
```{r}
levels(factor(meta$Experiment)) # 7 levels, including 6 negative controls for extraction and PCR
meta <- meta[grep("E2",rownames(meta)),] # Exclude negative controls
levels(factor(meta$Experiment)) # Check
```

## 16S ASV table

### Raw filtered counts
```{r}
raw <- read.csv(file = here("data", "clean", "feature_table_filtered.tsv"), dec = ".", sep = "\t", header = T, row.names = 1, comment.char = "") #20078 objs in 299 vars
```

## Explore Archaea

```{r}
com <- raw
archaea_k <- grepl("Archaea", com$taxonomy)
archaea <- com[archaea_k,]
archaea$asv_id <- rownames(archaea)
archea_tax <- as.data.frame(archaea$taxonomy)
archea_tax$asv_id <- archaea$asv_id
archaea$asv_sum <- rowSums(archaea[, 1:(ncol(archaea)-3)])
archaea$Sequence <- NULL
sums_archea <- as.data.frame(colSums(archaea[, 1:(ncol(archaea)-3)]))
sums_archea$sample <- rownames(sums_archea)

library(writexl)
write_xlsx(sums_archea, here::here("data", "clean", "archaea_sums_per_samples.xlsx"))
write_xlsx(archaea, here::here("data", "clean", "archaea_feature_tabe_filtered.xlsx"))
write_xlsx(archea_tax, here::here("data", "clean", "archaea_taxonomy.xlsx"))
```

## Explore methanotrophs
```{r}
library(stringr)
# Define the vector
potential_methanotrophs <- c("Methylocaldum", "Methylothermus", "Methylobacteria", "Methylosarcina", "Methylomicrobium", "Methylomonas", "Methylocystis", "Methylobacter", "Methylacidiphilum", "Methylacidimicrobium", "Methylocapsa", "Methylosinus", "Methylocella",  "Methylomonas", 'Methylococcaceae', "Methylophaga","Methylophilaceae",  "Methylococcus", "Methylocystis", "Methanobacterium", "Methanosarcina")

# Create a logical vector indicating rows with any matching patterns
matches <- rowSums(sapply(methanotrophs, function(pattern) {
  str_detect(com$taxonomy, pattern)
})) > 0

# Extract the matching rows
selected_rows <- com[matches, ]
selected_rows$Sequence <- NULL
selected_rows$sum <- rowSums(selected_rows[, 1:(ncol(selected_rows)-1)])
selected_metanotrophs <- selected_rows[, (ncol(selected_rows)-1):ncol(selected_rows)]
write_xlsx(selected_metanotrophs, here::here("data", "clean", "bacterial_methanotrophs_meso2.xlsx"))

###


```




### Keep only samples
```{r}
# Find columns with "E2" in their name
e2_cols <- grep("E2", colnames(raw))
# Find the index of the "taxonomy" column
taxonomy_col <- which(colnames(raw) == "taxonomy")
# Combine the indices
cols_to_keep <- c(e2_cols, taxonomy_col)
# Subset the dataframe
raw <- raw[, cols_to_keep]
```


### Keep only ASVs from samples
ASV present ONLY in negative controls will be excluded at this point
```{r}
# Compute row sums excluding the 'taxonomy' column
row_sums_without_taxonomy <- rowSums(raw[, sapply(raw, is.numeric)])

# Subset the dataframe based on the condition
raw <- raw[row_sums_without_taxonomy > 0, ]
```


Quickly fix sample names
```{r}
names(raw) <- sub("X", "", names(raw))
dim(raw) # 20063   284 including taxonomy
```

Check library size
```{r}
raw_libsize <- as.data.frame(colSums(raw[,1:ncol(raw)-1]))
summary(raw_libsize)
```

There is one library that is too small: 223.224MesoRh.4.1G.E2.16S.D66 with only 10 counts. The other samples.
 Min.   :   10                  
 1st Qu.:20833                  
 Median :37976                  
 Mean   :37509                  
 3rd Qu.:53254                  
 Max.   :99100  

Eliminate 223.224MesoRh.4.1G.E2.16S.D66 from raw and metadata

```{r}
'223.224MesoRh.4.1G.E2.16S.D66' %in% colnames(raw)
raw <- raw[, colnames(raw) != '223.224MesoRh.4.1G.E2.16S.D66']
meta <- meta[rownames(meta) != '223.224MesoRh.4.1G.E2.16S.D66',]
```

tidy environment
```{r}
rm(list = c("cols_to_keep", "e2_cols", "row_sums_without_taxonomy", "taxonomy_col"))
```


------------------------------------------------------------------------

# CLEAN METADATA

# ------------------------------------------------------------------------

## Order metadata

```{r}
meta_sorted <- meta[order(row.names(meta)),] # order metadata 
#rownames(meta_sorted) 
str(meta_sorted) # 282 4 variables
```

## Keep interestig variables
```{r}
names(meta_sorted)
cols_to_keep <- c("Sample.type", "Time", "Plant.type", "Temperature")
meta_sorted <- meta_sorted[, cols_to_keep]
```

# ------------------------------------------------------------------------

# TAXONOMY (RAW COUNTS)

# ------------------------------------------------------------------------

## Create tax_raw table for raw data

```{r}
dim(raw) # 20063   283 OK
tax_raw <- as.data.frame(raw[,ncol(raw)]) # taxonomy obtained from last column as independent table
otuids <- rownames((raw))
rownames(tax_raw) <- otuids
names(tax_raw) <- c("taxonomy")
```

## Separate tax_raw into groups
```{r}
tax_raw_clean <- separate(tax_raw, taxonomy, into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species", "Strain"), sep = ";")
tax_raw_clean <- tax_raw_clean[,-which(names(tax_raw_clean) %in% c("Species", "Strain"))]
tax_raw_clean <- as.data.frame(tax_raw_clean)
levels(as.factor(tax_raw_clean$Domain)) # 2 Domain: Archaea and Bacteria, all ok
levels(as.factor(tax_raw_clean$Phylum)) #  43 Phyla 
levels(as.factor(tax_raw_clean$Class)) # 121 classes
levels(as.factor(tax_raw_clean$Order)) # 296 orders
levels(as.factor(tax_raw_clean$Family)) # 466 Families
levels(as.factor(tax_raw_clean$Genus)) # 882 genus
str(tax_raw_clean)
```

```{#r}
taxonomy_clean <- as.data.frame(taxonomy[rownames(taxonomy) %in% rownames(rarefied_counts),])
names(taxonomy_clean) <- c("Taxonomy")
tax_clean <- as.data.frame(tax.clean[rownames(tax.clean) %in% rownames(rarefied_counts),])
rm(list = c("tax.clean", "taxonomy", "rarefied"))
rownames(taxonomy_clean) <- rownames(rarefied_counts)
```

## Clean taxonomy names
```{r}
# eliminate the characters  -----
pattern <- "[a-z]__"
replacement <- ""
tax_clean <- as.data.frame(apply(tax_raw_clean, 2, function(col) gsub(pattern, replacement, col)))
rm(pattern)
rm(replacement)

```

## Fill NAs with last available taxon rank
```{r}
tax_clean_filled <- tax_clean |> 
   t() |> 
   as.data.frame() |> 
   fill(everything(), .direction = "down") |> 
   t() |> 
   as.data.frame()
#write.table(tax.clean, file = here::here("data", "clean", "clean_taxonomy.txt"),sep = "\t")
#rm(list = c("raw_libsize", "tax_raw", "tax_clean", "tax_raw_clean", "pattern", "replacement", "otuids", "cols_to_keep"))
```

# ------------------------------------------------------------------------

# ABUNDANCE TABLES (RAW) - PHYLUM

# ------------------------------------------------------------------------

## Create clean count table no tax
```{r}
counts_clean_tax <- merge( raw, tax_clean_filled, by ="row.names")
rownames(counts_clean_tax) <- counts_clean_tax$Row.names
counts_clean_tax$Row.names <- NULL
counts_clean_tax$taxonomy <- NULL
counts <- counts_clean_tax[ , sapply(counts_clean_tax, is.numeric)]
```

## Phylum
### Aggregate by phylum
```{r}
phylum <- cbind(counts_clean_tax$Phylum, counts)
names(phylum)[names(phylum) == "counts_clean_tax$Phylum"] <- "phylum"
phylum <- aggregate(. ~ phylum, data = phylum, sum)
phylum <- phylum[-grep("Proteobacteria", phylum$phylum),] # eliminate proteobacteria to then attach proteobacteria classes
str(phylum)
rownames(phylum) <- phylum$phylum # set row names with first column containing phylum names
phylum$phylum <- NULL # remove column with tax rank
phylum <- as.matrix(t(phylum)) # transpose
```

### Aggregate by class 
to find all proteobacteria classes
```{r}
class <- cbind(counts_clean_tax$Class, counts)
names(class)[names(class) == "counts_clean_tax$Class"] <- "class"
class <- aggregate(. ~ class, data = class, sum)
str(class)
rownames(class) <- class$class # set row names with first column containing class names
class$class <- NULL # remove column with tax rank
class <- as.matrix(t(class)) 
proteo <- class[, grep("proteobacteria", colnames(class)) ]
```


### Attach proteobacteria classes to phylum
```{r}
phylum <- cbind(phylum, proteo)
```

## Genus
### Aggregate table
```{#r}
genus <- cbind(counts_clean_tax$Genus, counts)
names(genus)[names(genus) == "counts_clean_tax$Genus"] <- "genus"
genus <- aggregate(. ~ genus, data = genus, sum)
rownames(genus) <- genus$genus # set row names with first column containing genus names
genus$genus <- NULL # remove column with tax rank
genus <- as.matrix(t(genus)) # transpose
```

### Aggregate table from raw tax
```{r}
genus <- cbind(tax_raw$taxonomy, counts)
names(genus)[names(genus) == "tax_raw$taxonomy"] <- "genus"
genus <- aggregate(. ~ genus, data = genus, sum)
rownames(genus) <- genus$genus # set row names with first column containing genus names
genus$genus <- NULL # remove column with tax rank
genus <- as.matrix(t(genus)) # transpose
```

## Calculate relative abundances
```{r}
genus_rel <- (genus/rowSums(genus))
#Check
if (all(round(rowSums(genus_rel),6) == 1)) { #Sanity check all 1 - round() reduces the risk of floating-point errors
  print("Sanity check ok = all sum to 1")
} else {
  print("ERROR: not all columns sum to 1")
}
#Check
phylum_rel <- (phylum/rowSums(phylum))
if (all(round(rowSums(phylum_rel),6) == 1)) { #Sanity check all 1 - round() reduces the risk of floating-point errors
  print("Sanity check ok = all sum to 1")
} else {
  print("ERROR: not all columns sum to 1")
}
```

## Order by row names
```{r}
meta_sorted <- meta_sorted[order(row.names(meta_sorted)),] 
phylum_sorted <- phylum_rel[order(row.names(phylum_rel)),] 
genus_sorted <- genus_rel[order(row.names(genus_rel)),] # order 

# Sanity check for phylum
if (all(row.names(meta_sorted) == rownames(phylum_sorted) )) {
  print("Sanity check ok")
} else {
  print("ERROR: not all row names are the same")
}

# Sanity check for genus
if (all(row.names(meta_sorted) == rownames(genus_sorted) )) {
  print("Sanity check ok")
} else {
  print("ERROR: not all row names are the same")
}

```


## Export tax rank abundance tables
```{r}
save(meta_sorted, phylum_sorted, genus_sorted, file = here::here("RData", "RelAbund_tables.RData"))
```


# ------------------------------------------------------------------------

# ABUNDANCE TABLES (RAW)

# ------------------------------------------------------------------------

## Transpose

```{r}
com_raw <- raw_counts[,1:(ncol(raw_counts)-1)] # create community table with asv table with only abundances not taxonomy
com_raw_t = t(com_raw) # transposing table, samples as rows, species as columns to match metadata
```

## Keep only defined treatments as in metadata

```{r}
com_raw_s <- com_raw_t[rownames(com_raw_t) %in% rownames(meta_sorted),]
meta_sorted <- meta_sorted[rownames(meta_sorted) %in% rownames(com_raw_s),]
```

## Order table and check

```{r}
com_raw_sorted <- com_raw_s[order(row.names(com_raw_s)),]
rownames(meta_sorted) == rownames(com_raw_sorted)
```

## Tidy environment

```{r}
rm(list = c("otuids", "com_t", "com_s", "eukaryotas", "com"))
```

# ------------------------------------------------------------------------

## Save RDS objects

```{r}
save(meta_sorted, com_sorted,com_raw_sorted, tax_clean, file = here::here("RData", "DA_data.RData"))
```

##Export only once

```{r}
#save.image(file = here::here("source", "clean_Data_rarefied.RData"))
```

------------------------------------------------------------------------

# END OF SCRIPT

# ------------------------------------------------------------------------


## Set diff: used to compare between raw and rarefied data

```{#r}
A <- raw_counts
B <- rarefied_counts
rownames(A) <- raw_counts$taxonomy
rownames(B) <- rarefied_counts$taxonomy
unique_taxa_rarefied <- unique(rarefied$taxonomy)
unique_taxa_raw <- unique(raw$taxonomy)
setdiff(colnames(raw_counts), colnames(rarefied_counts))
setdiff(rownames(raw_counts), rownames(rarefied_counts))
setdiff(rownames(raw_counts), rownames(rarefied_counts))
```
